// Generated by CodiumAI

describe('code snippet', () => {

    // Successfully create a new user with valid email and password
    it('should create a new user when valid email and password are provided', async () => {
      const req = {
        body: {
          email: 'test@example.com',
          password: 'password123'
        }
      };
      const res = {
        status: jest.fn().mockReturnThis(),
        json: jest.fn()
      };

      await UsersController.postNew(req, res);

      expect(res.status).toHaveBeenCalledWith(201);
      expect(res.json).toHaveBeenCalledWith({ id: expect.any(ObjectId), email: 'test@example.com' });
    });

    // Return 500 error if there is an error creating user
    it('should return a 500 error when there is an error creating user', async () => {
      const req = {
        body: {
          email: 'test@example.com',
          password: 'password123'
        }
      };
      const res = {
        status: jest.fn().mockReturnThis(),
        json: jest.fn()
      };

      dbClient.db.collection = jest.fn().mockReturnValue({
        findOne: jest.fn().mockRejectedValue(new Error('Database error')),
        insertOne: jest.fn().mockRejectedValue(new Error('Database error'))
      });

      await UsersController.postNew(req, res);

      expect(res.status).toHaveBeenCalledWith(500);
      expect(res.json).toHaveBeenCalledWith({ error: 'Internal Server Error' });
    });
});
